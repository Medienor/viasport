import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

// List of known bot user agents (partial matches)
const BOT_USER_AGENTS = [
  'bot',
  'crawler',
  'spider',
  'googlebot',
  'bingbot',
  'yandex',
  'baidu',
  'semrush',
  'ahrefs',
  'lighthouse',
  'slurp',
  'duckduckgo',
  'facebookexternalhit',
  'whatsapp',
  'telegram',
  'discord',
  'screaming frog',
  'pingdom',
  'uptimerobot',
  'headless',
  'puppeteer',
  'selenium',
  'chrome-lighthouse',
  'pagespeed',
  'gtmetrix',
  'phantom',
  'petalbot',
  'ahrefsbot',
  'mj12bot',
  'dotbot',
  'rogerbot',
  'applebot',
  'twitterbot',
  'linkedinbot',
  'pinterest',
  'ia_archiver',
  'archive.org_bot',
  'sogou',
  'exabot',
  'proximic',
  'teoma',
  'slackbot',
  'discordbot',
  'curl',
  'wget',
  'python-requests',
  'axios',
  'node-fetch',
  'go-http-client',
  'java',
  'ruby',
  'php',
  'scrapy',
  'adidxbot',
  'adsbot-google',
  'mediapartners-google',
  'storebot-google',
  'apis-google',
  'feedfetcher-google',
  'google-read-aloud',
  'duplexweb-google',
  'googleweblight',
  'googleimageproxy',
  'developers.google.com',
  'adsbot',
  'mediapartners',
  'dataminr',
  'datagnionbot',
  'dataforseobot',
  'bytespider',
  'coccocbot',
  'apkpure',
  'neevabot',
  'pinterestbot',
  'tweetmemebot',
  'twitbot',
  'outbrain',
  'taboola',
  'seznambot',
  'daum',
  'naver',
  'yeti',
  'naverbot',
  'daumoa',
  'yisouspider',
  'mail.ru',
  'qwantify',
  'baiduspider',
  'sogou',
  'sosospider',
  'yahoo',
  'slurp',
  'teoma',
  'yandex',
  'yandexbot',
  'yandexmobilebot',
  'yandexmetrika',
  'yandexwebmaster',
  'yandexsitelinks',
  'yandexfavicons',
  'yandexvideo',
  'yandexmedia',
  'yandexblogs',
  'yandexvertis',
  'yandexnews',
  'yandexcatalog',
  'yandexmarket',
  'yandexcalendars',
  'yandexdirect',
  'yandexdirectfetcher',
  'yandexrss',
  'yandexaccessibilitybot',
  'yandexmobilescreen',
  'yandexforvendor',
  'yandexverticals',
  'yandexpartner',
  'yandexshopping',
  'yandexturbo',
  'yandexvideodwnl',
  'yandexwebvisor',
  'yandexadnet',
  'yandexdirectdyn',
  'yandexofficial',
  'yandexsport',
  'yandextracker',
  'yandexmaps',
  'yandexbusiness',
  'yandexmail',
  'yandexweather',
  'yandexdisk',
  'yandexhealth',
  'yandexmusic',
  'yandexvideo',
  'yandexsearch',
  'yandexnews',
  'yandexverticals',
  'yandexpartner',
  'yandexshopping',
  'yandexturbo',
  'yandexvideodwnl',
  'yandexwebvisor',
  'yandexadnet',
  'yandexdirectdyn',
  'yandexofficial',
  'yandexsport',
  'yandextracker',
  'yandexmaps',
  'yandexbusiness',
  'yandexmail',
  'yandexweather',
  'yandexdisk',
  'yandexhealth',
  'yandexmusic',
  'yandexvideo',
  'yandexsearch',
];

// Paths to protect from bots
const PROTECTED_PATHS = [
  '/lag/',
  '/kamper/',
  '/odds/',
  '/api/'
];

export function middleware(request: NextRequest) {
  const userAgent = request.headers.get('user-agent')?.toLowerCase() || '';
  const path = request.nextUrl.pathname;
  
  // Check if the request is from a bot
  const isBot = BOT_USER_AGENTS.some(botAgent => userAgent.includes(botAgent));
  
  // Check if the path should be protected
  const shouldProtect = PROTECTED_PATHS.some(protectedPath => path.startsWith(protectedPath));
  
  // If it's a bot and the path should be protected, return a 403 response
  if (isBot && shouldProtect) {
    console.log(`Blocked bot access to ${path} (User-Agent: ${userAgent})`);
    return NextResponse.json(
      { error: 'Access denied for bots' },
      { status: 403 }
    );
  }
  
  // Allow the request to continue
  return NextResponse.next();
}

// Configure which paths the middleware should run on
export const config = {
  matcher: [
    '/lag/:path*',
    '/kamper/:path*',
    '/odds/:path*',
    '/api/:path*',
  ],
}; 